/*
 * This source file was generated by the Gradle 'init' task
 */
package org.gametools.cleaner;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;
import com.beust.jcommander.Parameters;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

/**
 * WIP: used for prototyping
 */
public class Runner {

    private static final String DEFAULT_INSTALLATION = ".local/share/Steam/steamapps";
    // Storage Drives' index
    public static final String LIBRARY_FOLDERS = "libraryfolders.vdf";

    public static class GeneralOptions {

        @Parameter(names = {"-h", "--help", "?", "help"}, help = true)
        public boolean help;

        @Parameter(names = {"version"})
        public boolean version;

        @Parameter(names = {"build-version"})
        public boolean buildVersion;

        @Parameter(names = {"login"})
        public boolean login;
    }

    @Parameters(commandDescription = "Projects commands")
    static class Subject {
        @Parameter
        private List<String> parameters = new ArrayList<>();
    }

    public static void main(String[] args) {
        GeneralOptions generalOptions = new GeneralOptions();
        final JCommander jc = new JCommander(generalOptions);


        Subject subject = new Subject();
        Subject subjectId = new Subject();
        jc.addCommand("get", subject);
        jc.addCommand("list", subject);

        final JCommander getCommand = jc.getCommands().get("get");
        getCommand.addCommand("app", subjectId);
        getCommand.addCommand("apps", subjectId);

        jc.parse(args);

        System.out.println(generalOptions.help);
        System.out.println(subject.parameters);
        System.out.println(subjectId.parameters);


        // entities: libraries, apps, prefixes

        //  steam-cleaner list libraries
        //  steam-cleaner list apps (column with library)
        //  steam-cleaner list prefixes (column with library)

        // steam-cleaner get library [library-index]
        // steam-cleaner get prefix [app-id]

        // seam-cleaner delete prefix [app-id]


        String homePath = System.getProperty("user.home");
        Path defaultInstallation = Path.of(homePath).resolve(DEFAULT_INSTALLATION).resolve(LIBRARY_FOLDERS);

        StorageLocator storageLocator = new StorageLocator(defaultInstallation.toString());

        List<StorageDrive> drives = storageLocator.getDrives();
        for (StorageDrive drive : drives) {
            final String path = drive.path();
            System.out.println(path);
            // TODO pass all paths to have a unique view and return store-location as part of an Apps (string or object)?
            AppsRepository appsRepository = new AppsRepository(path);

            List<App> apps = appsRepository.getApps();
            for (App app : apps) {
                System.out.println("%s:\t'%s'\t\t@ '%s'".formatted(app.id(), app.name(), buildPath(app, drive)));
            }
        }
    }

    private static Object buildPath(App app, StorageDrive drive) {
        return "%s/steamapps/common/%s".formatted(drive.path(), app.installDir());
    }
}
