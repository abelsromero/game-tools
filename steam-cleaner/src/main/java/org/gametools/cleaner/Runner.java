/*
 * This source file was generated by the Gradle 'init' task
 */
package org.gametools.cleaner;

import org.gametools.cleaner.actions.Action;
import org.gametools.cleaner.actions.RunnerResolver;

/**
 * WIP: used for prototyping
 */
public class Runner {

    public static void main(String[] args) {

        final ArgsParser argsParser = new ArgsParser();

        Action action = argsParser.parse(args);

        if (action == null) {
            argsParser.printUsage();
        }

        if (action != null) {
            System.out.println("Command read: %s,%s".formatted(action.command(), action.subCommand()));
            System.out.println("\n");
        }

        new RunnerResolver()
            .resolver(action)
            .run();

//        String homePath = System.getProperty("user.home");
//        Path defaultInstallation = Path.of(homePath).resolve(DEFAULT_INSTALLATION).resolve(LIBRARY_FOLDERS);
//
//        StorageLocator storageLocator = new StorageLocator(defaultInstallation.toString());
//
//        List<StorageDrive> drives = storageLocator.getDrives();
//        for (StorageDrive drive : drives) {
//            final String path = drive.path();
//            System.out.println(path);
//            // TODO pass all paths to have a unique view and return store-location as part of an Apps (string or object)?
//            AppsRepository appsRepository = new AppsRepository(path);
//
//            List<App> apps = appsRepository.getApps();
//            for (App app : apps) {
//                System.out.println("%s:\t'%s'\t\t@ '%s'".formatted(app.id(), app.name(), buildPath(app, drive)));
//            }
//        }
    }

//    private static Object buildPath(App app, StorageDrive drive) {
//        return "%s/steamapps/common/%s".formatted(drive.path(), app.installDir());
//    }
}
